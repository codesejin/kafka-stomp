
server.address=localhost
server.port=8081

# API \uD638\uCD9C\uC2DC, SQL \uBB38\uC744 \uCF58\uC194\uC5D0 \uCD9C\uB825\uD55C\uB2E4.
spring.jpa.show-sql=true

# DDL \uC815\uC758\uC2DC \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC758 \uACE0\uC720 \uAE30\uB2A5\uC744 \uC0AC\uC6A9\uD569\uB2C8\uB2E4.
# ex) \uD14C\uC774\uBE14 \uC0DD\uC131, \uC0AD\uC81C \uB4F1
spring.jpa.generate-ddl=true

# MySQL \uC744 \uC0AC\uC6A9\uD560 \uAC83.
spring.jpa.database=mysql

# MySQL \uC124\uC815
spring.datasource.url=jdbc:mysql://localhost:3306/kafka_study?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password={password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# MySQL \uC0C1\uC138 \uC9C0\uC815
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

############################## Kafka ##############################
# \uCE74\uD504\uCE74\uC11C\uBC84 \uC815\uBCF4, \uAE30\uBCF8\uC801\uC73C\uB85C 9092 \uD3EC\uD2B8\uB97C \uC0AC\uC6A9\uD55C\uB2E4.
spring.kafka.bootstrap-servers=localhost:9092
# \uCEE8\uC288\uBA38\uC758 \uADF8\uB8F9id
spring.kafka.consumer.group-id=kafka-demo
# \uB370\uC774\uD130\uB97C \uC5B4\uB514\uAE4C\uC9C0 \uC77D\uC5C8\uB2E4\uB294 offset\uC744 \uC8FC\uAE30\uC801\uC73C\uB85C \uC800\uC7A5\uD560\uC9C0 \uC5EC\uBD80
spring.kafka.consumer.enable-auto-commit=true
# offset\uC5D0 \uC624\uB958\uAC00 \uC788\uC744 \uACBD\uC6B0 \uC5B4\uB514\uC11C\uBD80\uD130 \uB2E4\uC2DC \uD560\uC9C0 \uC5EC\uBD80
# ealiest - \uB9E8\uCC98\uC74C\uBD80\uD130 \uB2E4\uC2DC \uC77D\uB294\uB2E4
# latest - \uC774\uC804\uAEBC\uB294 \uBB34\uC2DC\uD558\uACE0, \uC774\uC81C\uBD80\uD130 \uB4E4\uC5B4\uC624\uB294 \uB370\uC774\uD130\uBD80\uD130 \uC77D\uAE30 \uC2DC\uC791\uD55C\uB2E4
spring.kafka.consumer.auto-offset-reset=latest
# \uB370\uC774\uD130\uB97C kafka\uB85C \uC804\uB2EC\uD560\uB54C \uC0AC\uC6A9\uD558\uB294 Key Encoder ClassStringSerializer\uB294 \uBB38\uC790\uC5F4 \uD615\uD0DC\uC758 \uB370\uC774\uD130\uC5D0\uB9CC \uC0AC\uC6A9 \uAC00\uB2A5
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# \uB370\uC774\uD130\uB97C kafka\uC5D0\uC11C \uBC1B\uC544\uC11C \uC0AC\uC6A9\uD558\uB294 Key Decoder ClassStringDeserializer\uB294 \uBB38\uC790\uC5F4 \uD615\uD0DC\uC758 \uB370\uC774\uD130\uC5D0\uB9CC \uC0AC\uC6A9 \uAC00\uB2A5
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# \uB370\uC774\uD130\uB97C kafka\uB85C \uC804\uB2EC\uD560\uB54C \uC0AC\uC6A9\uD558\uB294 Value Encoder ClassStringSerializer\uB294 \uBB38\uC790\uC5F4 \uD615\uD0DC\uC758 \uB370\uC774\uD130\uC5D0\uB9CC \uC0AC\uC6A9 \uAC00\uB2A5
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# \uB370\uC774\uD130\uB97C kafka\uC5D0\uC11C \uBC1B\uC544\uC11C \uC0AC\uC6A9\uD558\uB294 Value Decoder ClassStringDeserializer\uB294 \uBB38\uC790\uC5F4 \uD615\uD0DC\uC758 \uB370\uC774\uD130\uC5D0\uB9CC \uC0AC\uC6A9 \uAC00\uB2A5
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# consumer\uAC00 \uD55C\uBC88\uC5D0 \uAC00\uC838\uC624\uB294 message \uAC2F\uC218
spring.kafka.consumer.max-poll-records=1000
# \uAE30\uBCF8 \uC124\uC815 topic name
spring.kafka.template.default-topic=kafka-demo